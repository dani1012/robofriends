{"ast":null,"code":"var _jsxFileName = \"/Users/nickchen/Desktop/robofriends/src/containers/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll';\nimport SearchBox from '../components/SearchBox';\nimport './App.css'; // import {robots} from './robots';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    //state from reducer\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [] // searchfield: ''\n\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => this.setState({\n      robots: users\n    }));\n  } //    onSearchChange= (event)=> {\n  // \tthis.setState({searchfield: event.target.value})  \n  // }\n\n\n  render() {\n    const robots = this.state.robots;\n    const _this$props = this.props,\n          searchField = _this$props.searchField,\n          onSearchChange = _this$props.onSearchChange;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    }); // if there are no robots, we are Loading\n\n    if (!robots.length) {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"Loading\");\n    } else {\n      return React.createElement(\"div\", {\n        className: \"tc\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"RobotFriends\"), React.createElement(SearchBox, {\n        searchChange: onSearchChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), React.createElement(Scroll, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(CardList, {\n        robots: filteredRobots,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      })));\n    }\n  }\n\n} //subscribe to any state changes in the store\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/nickchen/Desktop/robofriends/src/containers/App.js"],"names":["React","Component","connect","CardList","Scroll","SearchBox","setSearchField","requestRobots","mapStateToProps","state","searchField","searchRobots","robots","isPending","error","mapDispatchToProps","dispatch","onSearchChange","event","target","value","onRequestRobots","App","constructor","componentDidMount","fetch","then","response","json","users","setState","render","props","filteredRobots","filter","robot","name","toLowerCase","includes","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAO,WAAP,C,CACA;;AAEA,SAAQC,cAAR,EAAwBC,aAAxB,QAA4C,YAA5C;;AAEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAChC,SAAO;AACLC,IAAAA,WAAW,EAAED,KAAK,CAACE,YAAN,CAAmBD,WAD3B;AACgD;AACrDE,IAAAA,MAAM,EAAEH,KAAK,CAACF,aAAN,CAAoBK,MAFvB;AAGLC,IAAAA,SAAS,EAAEJ,KAAK,CAACF,aAAN,CAAoBM,SAH1B;AAILC,IAAAA,KAAK,EAAEL,KAAK,CAACF,aAAN,CAAoBO;AAJtB,GAAP;AAMA,CAPD;;AASA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACxC,SAAO;AACLC,IAAAA,cAAc,EAAGC,KAAD,IAAWF,QAAQ,CAACV,cAAc,CAACY,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf,CAD9B;AAEFC,IAAAA,eAAe,EAAE,MAAML,QAAQ,CAACT,aAAa,EAAd;AAF7B,GAAP;AAIA,CALD;;AAQA,MAAMe,GAAN,SAAkBrB,SAAlB,CAA4B;AAEzBsB,EAAAA,WAAW,GAAE;AACd;AACA,SAAKd,KAAL,GAAa;AACbG,MAAAA,MAAM,EAAE,EADK,CAEb;;AAFa,KAAb;AAIE;;AAEDY,EAAAA,iBAAiB,GAAG;AACnBC,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACEC,IADF,CACOC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADnB,EAEEF,IAFF,CAEOG,KAAK,IAAI,KAAKC,QAAL,CAAc;AAAClB,MAAAA,MAAM,EAAGiB;AAAV,KAAd,CAFhB;AAIA,GAfwB,CAiB5B;AAEA;AAEA;;;AAGAE,EAAAA,MAAM,GAAG;AAAA,UACUnB,MADV,GACoB,KAAKH,KADzB,CACUG,MADV;AAAA,wBAEwC,KAAKoB,KAF7C;AAAA,UAEUtB,WAFV,eAEUA,WAFV;AAAA,UAEsBO,cAFtB,eAEsBA,cAFtB;AAGN,UAAMgB,cAAc,GAAGrB,MAAM,CAACsB,MAAP,CAAcC,KAAK,IAAG;AAC3C,aAAOA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkC5B,WAAW,CAAC2B,WAAZ,EAAlC,CAAP;AACD,KAFsB,CAAvB,CAHM,CAMN;;AACI,QAAI,CAACzB,MAAM,CAAC2B,MAAZ,EAAoB;AAClB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;AACD,KAFD,MAEO;AACX,aACC;AAAK,QAAA,SAAS,EAAG,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADH,EAEG,oBAAC,SAAD;AAAW,QAAA,YAAY,EAAItB,cAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFH,EAGG,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,oBAAC,QAAD;AAAU,QAAA,MAAM,EAAIgB,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH,CAHH,CADD;AAUU;AACP;;AA7CsB,C,CAiD5B;;;AACA,eAAe/B,OAAO,CAACM,eAAD,EAAiBO,kBAAjB,CAAP,CAA4CO,GAA5C,CAAf","sourcesContent":["import React , {Component} from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\n// import {robots} from './robots';\n\nimport {setSearchField, requestRobots} from '../actions'\n\nconst mapStateToProps = state => {\n\treturn {\n\t  searchField: state.searchRobots.searchField,         //state from reducer\n\t  robots: state.requestRobots.robots,\n\t  isPending: state.requestRobots.isPending,\n\t  error: state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n      onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\n\nclass App extends Component {    \n   \n   constructor(){\n\t super()\n\t this.state = {\n\t\trobots: [],\n\t\t// searchfield: ''\n\t }\n   }\n\n   componentDidMount() {\n   \tfetch('https://jsonplaceholder.typicode.com/users')\n\t   \t.then(response => response.json())\n\t   \t.then(users => this.setState({robots : users}));\n   \n   }\n\n//    onSearchChange= (event)=> {\n   \n// \tthis.setState({searchfield: event.target.value})  \n\t\t\n// }\n   \n\nrender() {\t\n            const {robots} = this.state;\t\n            const {searchField,onSearchChange} = this.props;    \n\t\t\tconst filteredRobots = robots.filter(robot =>{\n\t\t\t  return robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t\t}) \n   // if there are no robots, we are Loading\n       if (!robots.length) {\n       \t return <h1>Loading</h1>      \n       } else {\n\t\t return (\n\t\t\t\t<div className = 'tc'>\n\t\t\t\t\t  <h1 >RobotFriends</h1>\n\t\t\t\t\t  <SearchBox searchChange = {onSearchChange}/>  \n\t\t\t\t\t  <Scroll>\n\t\t\t\t\t     <CardList robots = {filteredRobots} />\n\t\t              </Scroll>\n\t\t\t\t</div>\n\t\t\t\t\t);\n\n            }\t\n     }\t\n\n  }\n\n//subscribe to any state changes in the store\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}