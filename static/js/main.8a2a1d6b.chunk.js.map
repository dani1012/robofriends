{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","id","name","email","className","alt","src","CardList","robots","map","user","i","key","Scroll","style","overflowY","border","height","children","SearchBox","searchChange","type","placeholder","onChange","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8a2a1d6b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\nconst {id, name, email } = props;\n  return (\n     <div className = 'tc bg-light-yellow dib br3 pa3 ma2 grow bw2 shadow-5'>\n        <img alt = 'robots' src ={`https://robohash.org/${id}?200*200`} />\n        <div>\n          <h2>{name}</h2>\n          <p> {email}</p>\n        </div>\n     </div>\n  \t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({robots}) => {\n     return (\n       <div>\n\t    {\n        robots.map((user, i)=> {\n           return (<Card \n\t\t         key = {robots[i].id} \n\t\t         id = {robots[i].id} \n\t\t         name = {robots[i].name} \n\t\t         email = {robots[i].email} \n\t\t           />\n\t\t          );\n\t         })\n\n         }\n\n      </div>\n\t\t);\n}\n\nexport default CardList;","import React from 'react';\t\n\nconst Scroll = (props)=> {\n\n\treturn(\n      \n        <div style={{overflowY: 'scroll' , border :'3px solid black', height : '800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t\t);\n};\n\nexport default Scroll;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n  \n   return (\n\n         <div className = 'pa2'>\t\t\n           <input  \n   \t\t\t   className = 'pa3 ba b--green bg-lightest-blue'\n\t           type = 'search' \n\t           placeholder = 'search robots'\n\t           onChange = {searchChange} //when onChange is triggerred , call searchChange \n\n\t        />\n\t     </div>\n   \t);\n\n}\n\nexport default SearchBox ;\n\n\n","import React , {Component} from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\n// import {robots} from './robots';\n\nimport {setSearchField, requestRobots} from '../actions'\n\nconst mapStateToProps = state => {\n\treturn {\n\t  searchField: state.searchRobots.searchField,         //state from reducer\n\t  robots: state.requestRobots.robots,\n\t  isPending: state.requestRobots.isPending,\n\t  error: state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n      onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\n\nclass App extends Component {    \n   \n  //  constructor(){\n\t // super()\n\t // this.state = {\n\t\t// robots: [],\n\t\t// // searchfield: ''\n\t // }\n  //  }\n\n   componentDidMount() {\n      this.props.onRequestRobots();\n\n   \t// fetch('https://jsonplaceholder.typicode.com/users')\n\t   // \t.then(response => response.json())\n\t   // \t.then(users => this.setState({robots : users}));\n   \n   }\n\n//    onSearchChange= (event)=> {\n   \n// \tthis.setState({searchfield: event.target.value})  \n\t\t\n// }\n   \n\nrender() {\t\t\n            const {searchField,onSearchChange,robots,isPending} = this.props;    \n\t\t\tconst filteredRobots = robots.filter(robot =>{\n\t\t\t  return robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t\t}) \n   // if there are no robots, we are Loading\n       if (isPending) {\n       \t return <h1>Loading</h1>      \n       } else {\n\t\t return (\n\t\t\t\t<div className = 'tc'>\n\t\t\t\t\t  <h1 >RobotFriends</h1>\n\t\t\t\t\t  <SearchBox searchChange = {onSearchChange}/>  \n\t\t\t\t\t  <Scroll>\n\t\t\t\t\t     <CardList robots = {filteredRobots} />\n\t\t              </Scroll>\n\t\t\t\t</div>\n\t\t\t\t\t);\n\n            }\t\n     }\t\n\n  }\n\n//subscribe to any state changes in the store\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n\n\n\n\n","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n\tpayload: text\n})\n\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t   \t.then(response => response.json())\n\t   \t.then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n\t   \t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import{\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants.js';\n\n\nconst initialStateSearch = {\n\tsearchField : ''\n}\n\nexport const searchRobots =  (state=initialStateSearch,action={})=>{\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t  return Object.assign({},state,{searchField:action.payload});\n\t\tdefault :\n\t\t  return state;\n\t}\n}\n\nconst initialStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror: ''\n}\n\nexport const requestRobots =  (state=initialStateRobots,action={})=>{\n\tswitch(action.type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t  return Object.assign({},state,{ isPending: true})\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t  return Object.assign({},state,{ robots: action.payload, isPending: false})\n\t\t  case REQUEST_ROBOTS_FAILED:\n\t\t  return Object.assign({},state,{ error: action.payload,  isPending: false});\n\t\tdefault :\n\t\t  return state;\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware, combineReducers} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport {createLogger} from 'redux-logger';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots, requestRobots} from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger))\n\nReactDOM.render(\n\t           <Provider store={store}>\n\t             <App />\n\t            </Provider>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}